// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    //decode instruction initial
    And(a=instruction[15], b=instruction[15], out=aOrCInstruction); //i 
    And(a=instruction[3], b=instruction[15], out=writeM); //d3

    Mux16(a=instruction, b=outMForDOrAReg, sel=aOrCInstruction, out=aRegisterIn);


    Mux(a=true, b=instruction[5], sel=aOrCInstruction, out=loadAReg);
    ARegister(in=aRegisterIn, load=loadAReg, out[0..14]=addressM, out=fullAddressM);


    Mux16(a=fullAddressM, b=inM, sel=instruction[12], out=aOrMComputation); //a 

    And(a=instruction[4], b=aOrCInstruction, out=loadRegD); //to make sure the d register can only be loaded by a c instruction
    DRegister(in=outMForDOrAReg, load=loadRegD, out=dRegisterOut);
    
    ALU(x=dRegisterOut, y=aOrMComputation ,zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=outMForDOrAReg, zr=outZr, ng=outNg);
    
    //decode load/jump instruction
    And(a=outZr, b=instruction[1], out=equalToZero);
    And(a=outNg, b=instruction[2], out=lessThanZero);
    Not(in=outNg, out=notNg); 
    Not(in=outZr, out=notZr); 
    And(a=notNg, b=instruction[0], out=notLessThanZero);
    And(a=notZr, b=notLessThanZero, out=greaterThanZero);
    Or(a=lessThanZero, b=greaterThanZero, out=outLTorGT);
    Or(a=outLTorGT, b=equalToZero, out=loadOut);

    And(a=loadOut, b=instruction[15], out=jump);

    PC(in=fullAddressM, load=jump, inc=true, reset=reset, out[0..14]=pc);
}