class EtchaSketch {

  field int LINE_LENGTH;
  field int START_X1, START_Y1;
  field int START_X2, START_Y2;
  field Line line1;
  field Line line2;
  field boolean restart;

  /** Constructs a new EtchaSketch game. */
  constructor EtchaSketch new() {
    do Screen.clearScreen();
    do Screen.setColor(true);

    //do Output.moveCursor(10,27);
	  //do Output.printString("EtchaSketch new");

    let LINE_LENGTH = 10;
    let START_X1 = 0;
    let START_Y1 = 0;
    let START_X2 = 511;
    let START_Y2 = 0;

    let line1 = Line.new(START_X1, START_Y1, LINE_LENGTH);
    let line2 = Line.new(START_X2, START_Y2, LINE_LENGTH);


    let restart = false;

    return this;
  }

  /** Deallocates the object's memory. */
  method void dispose() {
    do line1.dispose();
    do line2.dispose();
    do Memory.deAlloc(this);
    return;
  }


  /** Starts the game, and handles inputs from the user that control
   *  the lines' movement direction. */
  method void run() {
    var char key;

    //do Output.moveCursor(20,27);
	  //do Output.printString("EtchaSketch run");

    while (~restart) {
      // waits for a key to be pressed.
      while ((key = 0) & (~restart)) {
          let key = Keyboard.keyPressed();
          do Sys.wait(50);
      }

      do Output.moveCursor(1,27);
	    do Output.printInt(key);

      if (key = 65) {
        do line1.setDirection(1); } //'a'
      else {
        if (key = 83) {
          do line1.setDirection(2); } //'s'
        else {
          if (key = 87) {
            do line1.setDirection(3); } //'w'
          else {
            if (key = 68) {
              do line1.setDirection(4); } //'d'
          }
        }
      }


      if (key = 130) {
        do line2.setDirection(1); } //left arrow
      else {
        if (key = 133) {
          do line2.setDirection(2); } //down arrow
        else {
          if (key = 131) {
            do line2.setDirection(3); } //up arrow
          else {
            if (key = 132) {
              do line2.setDirection(4); } //right arrow
          }
        }
      }


      if (key = 140) { //esc
        let restart = true;
      }



      // Waits for the key to be released.
      while ((~(key = 0)) & (~restart)) {
        let key = Keyboard.keyPressed();
        do line1.draw(line1.getDirection());
        do line2.draw(line2.getDirection());
        do Sys.wait(50);
      }
    }

    if (restart) {
      do dispose();
      do Output.moveCursor(10,27);
	    do Output.printString("Press enter to restart");
    }

    return;
  }
}