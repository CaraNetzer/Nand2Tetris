class EtchaSketch {

  field int LINE_LENGTH;
  field int START_X1, START_Y1;
  field int START_X2, START_Y2;
  field Line line1;
  field Line line2;
  field boolean restart;
  field Enemy enemy;
  field boolean collision1, collision2;

  /** Constructs a new EtchaSketch game. */
  constructor EtchaSketch new() {
    do Screen.clearScreen();
    do Screen.setColor(true);

    //do Output.moveCursor(10,27);
	  //do Output.printString("EtchaSketch new");

    let LINE_LENGTH = 10;
    let START_X1 = 0;
    let START_Y1 = 0;
    let START_X2 = 510;
    let START_Y2 = 0;

    let line1 = Line.new(START_X1, START_Y1, LINE_LENGTH);
    let line2 = Line.new(START_X2, START_Y2, LINE_LENGTH);

    let enemy = Enemy.new();

    let restart = false;

    return this;
  }

  /** Deallocates the object's memory. */
  method void dispose() {
    do line1.dispose();
    do line2.dispose();
    do Memory.deAlloc(this);
    return;
  }


  /** Starts the game, and handles inputs from the user that control
   *  the lines' movement direction. */
  method void run() {
    var char key;
    var int line;

    while (~restart) {

      // waits for a key to be pressed.
      while ((key = 0) & (~restart)) {
          let key = Keyboard.keyPressed();

          /*let collision1 = enemy.collide(line1);
          let collision2 = enemy.collide(line2);
          if((~collision1) & (~collision2)) {
          }*/
            do enemy.move();

          do Sys.wait(25);
      }


      if (key = 65) {
        do line1.setDirection(1); //'a'
        let line = 1; }
      else {
        if (key = 83) {
          do line1.setDirection(2);  //'s'
          let line = 1; }
        else {
          if (key = 87) {
            do line1.setDirection(3);  //'w'
            let line = 1; }
          else {
            if (key = 68) {
              do line1.setDirection(4);  //'d'
              let line = 1; }
          }
        }
      }


      if (key = 130) {
        do line2.setDirection(1);  //left arrow
        let line = 2; }
      else {
        if (key = 133) {
          do line2.setDirection(2);  //down arrow
          let line = 2; }
        else {
          if (key = 131) {
            do line2.setDirection(3);  //up arrow
            let line = 2; }
          else {
            if (key = 132) {
              do line2.setDirection(4);  //right arrow
              let line = 2; }
          }
        }
      }


      if (key = 140) { //esc
        let restart = true;
      }

      //do Sys.wait(300);

      // Waits for the key to be released.
      while ((~(key = 0)) & (~restart)) {
        let key = Keyboard.keyPressed();


        /*let collision1 = enemy.collide(line1);
        let collision2 = enemy.collide(line2);
        if((~collision1) & (~collision2)) {
        }*/
        do enemy.move();


        if (line = 1) {
          do line1.draw(line1.getDirection());
        }
        if (line = 2) {
          do line2.draw(line2.getDirection());
        }

        do Sys.wait(50);
      }
    }

    if (restart) {
      do Output.moveCursor(10,13);
	    do Output.printString("Are you sure you want to quit? y/n");
      while (~(key = 0)) {
        let key = Keyboard.keyPressed();
        do Sys.wait(50);
      }
      while (key = 0) {
        let key = Keyboard.keyPressed();
        do Sys.wait(50);
      }
      if (key = 89) { //y
        do Screen.clearScreen(); }
      else {
        let restart = false;
        do Output.moveCursor(10,27);
        do run();
      }

    }

    return;
  }
}