// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/** A library of commonly used mathematical functions.
 *  All functions runs in O(n), where n is the number of bits used
 *  for representing a two's complement integer value (16 in the Hack computer).
 *  Note: Jack compilers implement multiplication and division
 *  using calls to OS functions in this class.
 */
class Math {
    static int n;             // Number of bits used for representing a two's complement integer
    static Array powersOfTwo; // Stores 2^0, 2^1, 2^2,..., 2^(n-1)

    // Initializes the Math library.
    function void init() {
        let n = 16;
        let powersOfTwo = Array.new(n);
        let powersOfTwo[0] = 1;
        let powersOfTwo[1] = 2;
        let powersOfTwo[2] = 4;
        let powersOfTwo[3] = 8;
        let powersOfTwo[4] = 16;
        let powersOfTwo[5] = 32;
        let powersOfTwo[6] = 64;
        let powersOfTwo[7] = 128;
        let powersOfTwo[8] = 256;
        let powersOfTwo[9] = 512;
        let powersOfTwo[10] = 1024;
        let powersOfTwo[11] = 2048;
        let powersOfTwo[12] = 4096;
        let powersOfTwo[13] = 8192;
        let powersOfTwo[14] = 16384;
        let powersOfTwo[15] = 32767 + 1;
        return;
    }

    function Array getPowersOfTwoArray() {
        return powersOfTwo;
    }

    function boolean negResult(int x, int y) {
        var boolean negResult;

        if (((x < 0) & (y < 0)) | ((x > 0) & (y > 0))) {
            let negResult = false;
        } else {
            let negResult = true;
        }

        return negResult;
    }

    /** Returns the product of x and y.
     *  When a Jack compiler detects the multiplication operator '*'
     *  in an expression, it handles it by invoking this method.
     *  Thus, in Jack, x * y and Math.multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, j;
        var boolean negResult;
        let sum = 0;
        let j = 0;

        let negResult = Math.negResult(x, y);

        let x = Math.abs(x);
        let y = Math.abs(y);

        let shiftedX = x;


        while (j < n) {
            if (Math.bit(y, j)) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let j = j + 1;
        }

        if (negResult) {
            return -sum;
        } else {
            return sum;
        }
    }

    function boolean bit(int x, int j) {
        var int bit;
        let bit = powersOfTwo[j];
        if ((x & bit) > 0) {
            return true;
        } else {
            return false;
        }
    }

    /** Returns the integer part of x / y.
     *  When a Jack compiler detects the division operator '/'
     *  an an expression, it handles it by invoking this method.
     *  Thus, x/y and Math.divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int quotient, calc;
        var boolean negResult;

        let negResult = Math.negResult(x, y);

        let x = Math.abs(x);
        let y = Math.abs(y);

        if (y > x) {
            return 0;
        }

        // handling overflow
        // TODO not sure if this is supposed to return 0 or not
        if (y < 0) {
            //return 0;
        }

        let quotient = Math.divide(x, y+y);

        let quotient = quotient + quotient;

        // TODO didn't figure out how to do this without any multiplication
        let calc = x - (quotient * y);
        if ((calc > y) | (calc = y)) {
            let quotient = quotient + 1;
        }

        /*if(calc < y) {
            return 2*q;
        }
        else {
            return 2*q + 1;
        }*/

        if (negResult) {
            return -quotient;
        } else {
            return quotient;
        }
    }

    /** Returns the integer part of the square root of x.
    */
    function int sqrt(int x) {
        var int y, i, j, exp, square;
        let y = 0;
        // n = 16
        let j = (16/2) - 1;

        while ((j > 0) | (j = 0)) {
            // calculate 2^j
            let i = j;
            let exp = 1;
            while (i > 0) {
                let exp = 2*exp;
                let i = i - 1;
            }

            let square = (y + exp)*(y + exp);

            // gt 0 to account for overflow of (y+exp)^2
            if (((square < x) | (square = x)) & (square > 0)) {
                let y = y + exp;
            }
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater value.
    */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        } else {
            return b;
        }
    }

    /** Returns the smaller value.
    */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        } else {
            return b;
        }
    }

    /** Returns the absolute value of x
    */
    function int abs(int x) {
        if ((x > 0) | (x = 0)) {
            return x;
        } else {
            return 0 - x;
        }
    }
}