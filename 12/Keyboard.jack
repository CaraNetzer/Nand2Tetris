// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Keyboard.jack

/**
 * A library for handling user input from the keyboard.
 */
class Keyboard {

    /** Initializes the keyboard. */
    function void init() {
        return;
    }

    /**
     * Returns the character of the currently pressed key on the keyboard;
     * if no key is currently pressed, returns 0.
     *
     * Recognizes all ASCII characters, as well as the following keys:
     * new line = 128 = String.newline()
     * backspace = 129 = String.backspace()
     * left arrow = 130
     * up arrow = 131
     * right arrow = 132
     * down arrow = 133
     * home = 134
     * End = 135
     * page up = 136
     * page down = 137
     * insert = 138
     * delete = 139
     * ESC = 140
     * F1 - F12 = 141 - 152
     */

    function char keyPressed() {
        if(~(Memory.peek(24576) = 0)) {
            return Memory.peek(24576);
        } else {
            return 0;
        }
    }

    /**
     * Waits until a key is pressed on the keyboard and released,
     * then echoes the key to the screen, and returns the character
     * of the pressed key.
     */
    function char readChar() {
        var char key, output;
        let key = Keyboard.keyPressed();
        while (key = 0) {
            let key = Keyboard.keyPressed();
        }
        let output = key;
        while (~(key = 0)) {
            let key = Keyboard.keyPressed();
        }
        do Output.printChar(output); // handles backspace
        return output;
    }

    /**
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its value. Also handles user backspaces.
     */
    function String readLine(String message) {
        var String str;
        var char c;
        var int strMaxLength;
        let strMaxLength = 80;

        do Output.printString(message);

        let str = String.new(strMaxLength); // historical single line
        while(true) {
            let c = Keyboard.readChar();
            if(c = String.newLine()) {
                do Output.println();
                return str;
            } else {
                if(c = String.backSpace()) {
                    if(str.length() > 0) {
                        // Output.backSpace handled in readChar
                        do str.eraseLastChar();
                    }
                } else {
                    if(strMaxLength = str.length()) {
                        do Output.backSpace();
                    } else {
                        let str = str.appendChar(c);
                    }
                }
            }
        }
        return str; // will not reach here
    }

    function boolean isDigit(char c) {
        if ((c < 48) | (c > 57)) {
            return false;
        } else {
            return true;
        }
    }

    /**
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its integer value (until the first non-digit character in the
     * entered text is detected). Also handles user backspaces.
     */
    function int readInt(String message) {
        var String str;
        var char c;
        var int num;

        let str = String.new(80); // historical single line

        do Output.printString(message);
        while(true) {
            let c = Keyboard.readChar();
            if(c = String.backSpace()) {
                // Output.backSpace handled in readChar
                do str.eraseLastChar();
            } else {
                if((~Keyboard.isDigit(c)) & ~(c = 45)) { // 45 --> -
                    do Output.println();
                    return str.intValue();
                } else {
                    let str = str.appendChar(c);
                }
            }
        }
        return -1; // will not reach here
    }
}
