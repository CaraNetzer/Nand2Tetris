// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */
class Memory {

    static int free;
    //field int freeLength;
    //field int next;

    /** Initializes the class. */
    function void init() {
        let free = 2048; //heap base
        //let freeLength = 14336; // 16384 - 2048
        //let next = null;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        var int memory;
        let memory = 0;
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        var int memory;
        let memory = 0;
        let memory[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int pointer;
        let pointer = free;
        let free = free + size;
        return pointer;
        // TODO implement the more complex version in the future?
        // TODO keep track of open segments instead of this
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        //var Array segment;
        //let segment = o - 1;
        // segment.length = o[-1];
        // insert segment into the freelist
        return;

        // TODO implement the more complex version in the future?
    }
}
