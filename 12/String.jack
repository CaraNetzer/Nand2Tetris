// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field int maximumLength;
    field int currentLength;
    field int base;
    field Array arr;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let maximumLength= maxLength;
        let currentLength = 0;
        let arr = Array.new(maxLength);
        let base = arr.getBase();

        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do arr.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return currentLength;
    }

    method int getMaxLength() {
        return maximumLength;
    }

    method Array getArr() {
        return arr;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return arr[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let arr[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {

        // no plus one and no <=
        if(currentLength < maximumLength) {
            let arr[currentLength] = c;
            let currentLength = currentLength + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let arr[currentLength - 1] = null;
        let currentLength = currentLength - 1;
        return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
        // TODO handle negative numbers

        var int value, i, digit;
        let value = 0;
        let i = 0;

        while (i < currentLength) {
            let digit = arr[i] - 48;
            let value = ((value*10) + digit);
        }

        return value;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var String str;
        var boolean neg;

        let neg = false;
        if(val < 0) {
            let neg = true;
            let val = Math.abs(val);
        }

        let str = String.int2String(val, neg);

        let maximumLength= str.getMaxLength();
        let currentLength = str.length();
        let arr = str.getArr();
        let base = arr.getBase();
        return;
    }

    function char int2Char(int n) {
        return n + 48;
    }

    function String int2String(int n, boolean neg) {
        var int lastDigit, val, digits, num;
        var char c;
        var String val;

        let lastDigit = (n - ((n/10)*10));

        let c = String.int2Char(lastDigit);

        if (n < 10) {
            let val = String.new(6); // max digits for max int 32767, plus space for a negative sign
            if(neg) {
                do val.appendChar(45); // -
            }
            do val.appendChar(c);
            return val;
        }
        else {
            let val = String.int2String(n/10, neg);
            let val = val.appendChar(c);
            return val;
        }
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
