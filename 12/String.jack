// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field int maximumLength;
    field int currentLength;
    field int base;
    field Array arr;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let maximumLength= maxLength;
        let currentLength = 0;
        let arr = Array.new(maxLength);
        let base = arr.getBase();

        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do arr.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return currentLength;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return arr[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let arr[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {

        // no plus one and no <=
        if(currentLength < maximumLength) {
            let arr[currentLength] = c;
            let currentLength = currentLength + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let arr[currentLength] = null;
        return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
        var int value, i, digit;
        let value = 0;
        let i = 0;

        while (i < currentLength) {
            //let digit = String.getDigitFromAscii(arr[i]);
            let digit = arr[i] - 48;
            let value = ((value*10) + digit);
        }

        return value;
    }

    function int getDigitFromAscii(char c) {
        // TODO unsure if handling chars correctly here
        if (c = 0) {
            return 48;
        } else {
            if (c = 1) {
                return 49;
        } else {
            if (c = 2) {
                return 50;
        } else {
            if (c = 3) {
                return 51;
        } else {
            if (c = 4) {
                return 52;
        } else {
            if (c = 5) {
                return 53;
        } else {
            if (c = 6) {
                return 54;
        } else {
            if (c = 7) {
                return 55;
        } else {
            if (c = 8) {
                return 56;
        } else {
            if (c = 9) {
                return 57;
            }
        }}}}}}}}}
        // TODO unsure about default value
        return 0;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        // TODO need to rework this method
       //var int lastDigit, val;
       //var char c;
       //var String val;
       //let lastDigit = (val - ((val/10)*10));
       //let val = lastDigit + 48;
       //let c = val;
       ////let c = String.getAsciiFromDigit(lastDigit);

       //if (val < 10) {
       //    //return c;
       //} else {
       //    let val = setInt(val/10);
       //    let val = val.appendChar(c);
       //    //return val;
       //    // TODO does splitting that up onto multiple lines make it non-recursive?
       //}
        return;
    }

    function int getAsciiFromDigit(int n) {
        if (n = 48) {
            return "0";
        } else {
            if (n = 49) {
                return "1";
        } else {
            if (n = 50) {
                return "2";
        } else {
            if (n = 51) {
                return "3";
        } else {
            if (n = 52) {
                return "4";
        } else {
            if (n = 53) {
                return "5";
        } else {
            if (n = 54) {
                return "6";
        } else {
            if (n = 55) {
                return "7";
        } else {
            if (n = 56) {
                return "8";
        } else {
            if (n = 57) {
                return "9";
            }
        }}}}}}}}}
        // TODO unsure about default value
        return "0";
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
